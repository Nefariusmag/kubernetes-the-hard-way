---
- name: download kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl
    dest: /usr/bin/kubectl
    mode: 0755

- name: check kubectl version
  register: kubectl_version
  shell: kubectl version --client

- debug: var=kubectl_version.stdout_lines

- name: Get IP master
  shell: host {{name_master}} | awk '{print $4}'
  register: "ip_master_reg"
- debug: var="ip_master_reg.stdout"
- name: variable ip
  set_fact:
    ip_master: "{{ ip_master_reg.stdout }}"

- name: Generate a kubeconfig file for each worker node
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://{{ip_master}}:6443 --kubeconfig={{item.instance}}.kubeconfig
    kubectl config set-credentials system:node:{{item.instance}} --client-certificate={{item.instance}}.pem --client-key={{item.instance}}-key.pem --embed-certs=true --kubeconfig={{item.instance}}.kubeconfig
    kubectl config set-credentials system:node:{{item.instance}} --client-certificate={{item.instance}}.pem --client-key={{item.instance}}-key.pem --embed-certs=true --kubeconfig={{item.instance}}.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=system:node:{{item.instance}} --kubeconfig={{item.instance}}.kubeconfig
    kubectl config use-context default --kubeconfig={{item.instance}}.kubeconfig
  with_items:
    - { instance: "{{name_worker_0}}"}
    - { instance: "{{name_worker_1}}"}
    - { instance: "{{name_worker_2}}"}
  args:
    chdir: /opt/ssl/

- name: Generate a kubeconfig file for the kube-proxy service
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://{{ip_master}}:6443 --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
    kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
  args:
    chdir: /opt/ssl

- name: Generate a kubeconfig file suitable for authenticating as the admin user
  shell: kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://{{ip_master}}:6443
  args:
    chdir: /opt/ssl/

- shell: kubectl config set-credentials admin --client-certificate=admin.pem --client-key=admin-key.pem
  args:
    chdir: /opt/ssl

- shell: kubectl config set-context kubernetes --cluster=kubernetes --user=admin

- shell: kubectl config use-context kubernetes

- name: download java
  ignore_errors: true
  get_url:
    url: http://artifactory.dkp.lanit.ru:8081/artifactory/utils/oracle/java/1.8/java-1.8.sh # или интернет
    dest: /opt/install_java_bin.sh
    mode: 0755

- block: # генерим ключ для доступа к кластеру

  - name: install java
    ignore_errors: true
    shell: /opt/install_java_bin.sh

  - name: delete java installer
    ignore_errors: true
    file:
      path: /opt/install_java_bin.sh
      state: absent

  - name: test java installed
    ignore_errors: true
    register: java_status
    shell: /opt/jdk8/bin/java -version

  - debug: var=java_status.stderr_lines

  - name: generate key step 0
    shell: |
      cat kubernetes.pem > super.pem
      cat admin.pem >> super.pem
      cat kubernetes-key.pem > super-key.pem
      cat admin-key.pem >> super-key.pem
    args:
      chdir: /opt/ssl

  - name: generate key step 1
    shell: openssl pkcs12 -export -in ./super.pem -inkey ./super-key.pem -out ./kube-api-keystore.p12 -name {{name_master}} -passin pass:1234567890 -passout pass:1234567890
    args:
      chdir: /opt/ssl

  - name: generate key step 2
    ignore_errors: true
    shell: keytool -importkeystore -srckeystore ./kube-api-keystore.p12 -srcstoretype PKCS12 -srcstorepass 1234567890 -alias {{name_master}} -deststorepass 1234567890 -destkeypass 1234567890 -destkeystore ./kube-api-keystore.jks
    args:
      chdir: /opt/ssl

  - name: generate key step 3
    shell: echo "$(cat ./kube-api-keystore.jks | base64)" > base64_file
    args:
      chdir: /opt/ssl

- name: Change user
  file:
    path: /opt/ssl/
    owner: "{{remoteuser}}"
    group: "{{remoteuser}}"
    recurse: true
