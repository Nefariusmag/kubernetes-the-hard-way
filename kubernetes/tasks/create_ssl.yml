- name: Download cfssl
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
    dest: /tmp/cfssl

- name: Download cfssljson
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
    dest: /tmp/cfssljson

- name: Chmod cfssl
  copy:
    src: /tmp/cfssl
    dest: /usr/bin/cfssl
    mode: 0755

- name: Chmod cfssljson
  copy:
    src: /tmp/cfssljson
    dest: /usr/bin/cfssljson
    mode: 0755

- name: Check cfssl version
  register: cfssl_version
  shell: cfssl version

- debug: var=cfssl_version.stdout_lines

- name: Create folder
  file:
    path: /opt/ssl
    state: directory

- name: Copy json
  copy:
    src: "{{item}}"
    dest: /opt/ssl/
  with_items:
    - ca-config.json
    - ca-csr.json
    - admin-csr.json
    - kube-proxy-csr.json
    - kubernetes-csr.json

- name: Generate the CA certificate and private key
  shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  args:
    chdir: /opt/ssl/

- name: Generate the admin client certificate and private key
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
  args:
    chdir: /opt/ssl/

- name: Copy json for workers
  template:
    src: instance-csr.json
    dest: /opt/ssl/{{item.instance}}-csr.json
  with_items:
    - { instance: "{{name_worker_key}}-0"}
    - { instance: "{{name_worker_key}}-1"}
    - { instance: "{{name_worker_key}}-2"}

- name: Generate a certificate and private key for each Kubernetes worker node
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{item.instance}},{{item.ip_instance}} -profile=kubernetes {{item.instance}}-csr.json | cfssljson -bare {{item.instance}}
  args:
    chdir: /opt/ssl/
  with_items:
    - { instance: "{{name_worker_key}}-0", ip_instance: "{{ip_instance_0}}"}
    - { instance: "{{name_worker_key}}-1", ip_instance: "{{ip_instance_1}}"}
    - { instance: "{{name_worker_key}}-2", ip_instance: "{{ip_instance_2}}"}

- name: Generate the kube-proxy client certificate and private key
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
    chdir: /opt/ssl/

- name: Generate the Kubernetes API Server certificate and private key
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ip_etcd_0}},{{ip_etcd_1}},{{ip_etcd_2}},{{ip_master}},127.0.0.1,kubernetes.default -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
  args:
    chdir: /opt/ssl/

- name: Generate an encryption key
  register: result
  shell: head -c 32 /dev/urandom | base64

- debug: var=result.stdout

- name: Set facts a_name
  set_fact:
    ENCRYPTION_KEY: "{{ result.stdout }}"

- name: Create the encryption-config.yaml encryption config file
  template:
    src: encryption-config.yaml
    dest: /opt/ssl/encryption-config.yaml
